module           = { {'\n'} function }
function         = 'fn' identifier '(' {'\n'} arguments {'\n'} ')' (':' type)? {'\n'} '{' {'\n'} function_body '}' '\n'
arguments        = (value_definition { ',' {'\n'} value_definition })?
value_definition = identifier ':' type
function_body    = { statement } return_statement?
statement        = end_of_statement | assign
assign           = value_definition '=' end_of_statement
return_statement = 'return' end_of_statement
end_of_statement = expression '\n'
expression       = add
add              = multiply { '+' {'\n'} multiply | '-' {'\n'} multiply }
multiply         = unary { '*' {'\n'} unary | '/' {'\n'} unary }
unary            = ( '+' | '-' )? primary
primary          = num | identifier | function_call | '(' {'\n'} expression {'\n'} ')'
function_call    = identifier '(' call_arguments? ')'
call_arguments   = {'\n'} expression { ',' {'\n'} expression  } ','? {'\n'}
