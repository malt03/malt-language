module              = { {'\n'} function | struct {'\n'} }
struct              = 'struct' type '{' {'\n'} properties? {'\n'} '}' '\n'
properties          = value_definition { '\n' {'\n'} value_definition }
function            = 'fn' identifier '(' {'\n'} arguments {'\n'} ')' (':' type)? {'\n'} block '\n'
arguments           = (value_definition { ',' {'\n'} value_definition })?
value_definition    = identifier ':' type
block               = '{' {'\n'} ((statement { '\n' {'\n'} statement } ('\n' {'\n'} return_statement)?) | return_statement)? {'\n'} '}'
statement           = expression | assign
assign              = identifier (':' type)? '=' expression
return_statement    = 'return' expression?
expression          = equality
equality            = relational ("==" {'\n'} relational | "!=" {'\n'} relational)?
relational          = add ("<" {'\n'} add | "<=" {'\n'} add | ">" {'\n'} add | ">=" {'\n'} add)?
add                 = multiply { '+' {'\n'} multiply | '-' {'\n'} multiply }
multiply            = unary { '*' {'\n'} unary | '/' {'\n'} unary }
unary               = ( '+' | '-' )? primary
primary             = num | identifier | function_call | if_branch | struct_property | struct_construction | '(' {'\n'} expression {'\n'} ')'
function_call       = '<' identifier { {'\n'} call_argument } '/>'
call_argument       = identifier '=' '{' expression '}'
if_branch           = 'if' expression block { 'elsif' expression block } ('else' block )?
struct_property     = identifier '.' identifier
struct_construction = '<' type { {'\n'} call_argument } '/>'
