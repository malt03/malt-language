module              = { {'\n'} function {'\n'} }
function            = 'fn' identifier '(' {'\n'} arguments {'\n'} ')' (':' type)? {'\n'} block
arguments           = (value_definition { ',' {'\n'} value_definition })?
value_definition    = identifier ':' type
block               = '{' {'\n'} ((statement { '\n' {'\n'} statement } ('\n' {'\n'} return_statement)?) | return_statement)? {'\n'} '}' '\n'
statement           = expression | assign
assign              = value_definition '=' expression
return_statement    = 'return' expression
expression          = equality
equality            = relational ("==" {'\n'} relational | "!=" {'\n'} relational)?
relational          = add ("<" {'\n'} add | "<=" {'\n'} add | ">" {'\n'} add | ">=" {'\n'} add)?
add                 = multiply { '+' {'\n'} multiply | '-' {'\n'} multiply }
multiply            = unary { '*' {'\n'} unary | '/' {'\n'} unary }
unary               = ( '+' | '-' )? primary
primary             = num | identifier | function_call | '(' {'\n'} expression {'\n'} ')'
function_call       = identifier '(' call_arguments? ')'
call_arguments      = {'\n'} call_argument { ',' {'\n'} call_argument } ','? {'\n'}
call_argument       = identifier ':' expression
# if_branch           = if expression 


module              = { {'\n'} function }
struct              = 'struct' type '{' {'\n'} properties  '}' '\n'
properties          = { property '\n' {'\n'} }
property            = value_definition
function            = 'fn' identifier '(' {'\n'} arguments {'\n'} ')' (':' type)? {'\n'} '{' {'\n'} function_body '}' '\n'
arguments           = (value_definition { ',' {'\n'} value_definition })?
value_definition    = identifier ':' type
function_body       = { statement } return_statement?
statement           = end_of_statement | assign
assign              = value_definition '=' end_of_statement
return_statement    = 'return' end_of_statement
end_of_statement    = expression '\n'
expression          = add
add                 = multiply { '+' {'\n'} multiply | '-' {'\n'} multiply }
multiply            = unary { '*' {'\n'} unary | '/' {'\n'} unary }
unary               = ( '+' | '-' )? primary
primary             = num | identifier | function_call | struct_property | struct_construction | '(' {'\n'} expression {'\n'} ')'
function_call       = identifier '(' call_arguments? ')'
call_arguments      = {'\n'} identifier ':' expression { ',' {'\n'} identifier ':' expression } ','? {'\n'}
struct_property     = identifier '.' identifier
struct_construction = '<' Type
